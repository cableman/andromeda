<?php
// $Id: nodespotbox.module,v 1.1.2.1 2010/12/27 19:23:35 cableman0408 Exp $

/**
 * @file
 * Creates spotboxes based on node types and displayed using views. This module
 * is based on nodeblock and nodeasblock.
 */

/**
 * Utility function to determined if spotbox is enabled for a given node type.
 *
 * @param string/object $type
 * @return boolean
 */
function nodespotbox_type_enabled($type) {
  if (is_object($type)) {
    $type = $type->type;
  }
  return variable_get('nodespotbox_'. $type, FALSE);
}

/**
 * Utility function to determind if the user should enter a view display id.
 *
 * @param string/object $type
 * @return boolean
 */
function nodespotbox_used_supplied_view($type) {
  if (is_object($type)) {
    $type = $type->type;
  }
  return variable_get('nodespotbox_view_display_id_user_'. $type, FALSE) ? TRUE : FALSE;
}

/**
 * Implementation of hook_form_alter() to change the node type settings form and
 * node edit/add form.
 *
 */
function nodespotbox_form_alter(&$form, $form_state, $form_id) {
  // Content type settings
  if ($form_id == 'node_type_form' && isset($form['identity']['type'])) {

    // Load view information
    $views = _nodespotbox_load_all_views_info();
    $view_names = array('none' => 'None');
    $display_names = array('none' => 'None');
    foreach (array_keys($views) as $name) {
      $view_names[$name] = t($name);
      // Make array with all possible choices, to prevent form security problems on submit
      $display_names = array_merge($display_names, $views[$name]['displays']);
    }

    // Build js settings array
    $settings = array(
      'nodespotbox' => $views,
    );

    // Get current node type
    $node_type = $form['#node_type']->type;

    $form['nodespotbox-wrapper-start'] = array('#value' => '<div id="nodespotbox-settings">');
    $form['nodespotbox'] = array(
      '#type' => 'fieldset',
      '#title' => t('Node spotbox settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['nodespotbox']['nodespotbox'] = array(
      '#type' => 'radios',
      '#title' => t('Enable spotbox'),
      '#default_value' => variable_get('nodespotbox_'. $node_type, 0),
      '#options' => array(0 => t('Disabled'), 1 => t('Enabled')),
      '#description' => t('Should these nodes be made available as spotboxes?'),
    );
    $form['nodespotbox']['nodespotbox_always'] = array(
      '#type' => 'radios',
      '#title' => t('Always create spotbox'),
      '#default_value' => variable_get('nodespotbox_always_'. $node_type, 1),
      '#options' => array(1 => t('Enabled'), 0 => t('Disabled')),
      '#description' => t('Should these nodes always be made available as spotboxes? If not users can select if a node of this type should be a spotbox.'),
    );
    $form['nodespotbox']['nodespotbox_view_name'] = array(
      '#type' => 'select',
      '#title' => t('View name'),
      '#description' => t('The name of the view used to display these nodes?'),
      '#options' => $view_names,
      '#attributes' => array('class' => 'nodespotbox-views-names'),
      '#default_value' => variable_get('nodespotbox_view_name_'. $node_type, 'none'),
    );
    $form['nodespotbox']['nodespotbox_view_display_id'] = array(
      '#type' => 'select',
      '#title' => t('View display id'),
      '#description' => t('The view aboves display. If selected that users can choose, this will be the default display.'),
      '#options' => $display_names,
      '#attributes' => array('class' => 'nodespotbox-views-displays'),
      '#default_value' => variable_get('nodespotbox_view_display_id_'. $node_type, 'none'),
    );
    $form['nodespotbox']['nodespotbox_view_display_id_user'] = array(
      '#type' => 'radios',
      '#title' => t('Should user select display ID ?'),
      '#description' => t('Determind if the user should be able to select the view display.'),
      '#options' => array('1' => t('Yes'), '0' => t('No')),
      '#default_value' => variable_get('nodespotbox_view_display_id_user_'. $node_type, '0'),
    );
    $form['nodespotbox-wrapper-close'] = array('#value' => '</div>');

    // Add front-end js support
    drupal_add_js($settings, 'setting');
    drupal_add_js(drupal_get_path('module', 'nodespotbox') . '/js/nodespotbox.js');
  }
  // Node add/edit
  elseif (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] .'_node_form' == $form_id) {
    $node = $form['#node'];
    if (nodespotbox_type_enabled($node->type)) {
      $form['nodespotbox'] = array(
        '#type' => 'fieldset',
        '#title' => t('Spotbox options'),
        '#tree' => TRUE,
      );
      if (!variable_get('nodespotbox_always_'. $node->type, 1)) {
        $form['nodespotbox']['available'] = array(
          '#type' => 'radios',
          '#title' => t('Enable spotbox'),
          '#default_value' => $node->nodespotbox_available ? 1 : 0,
          '#options' => array(0 => t('Disabled'), 1 => t('Enabled')),
          '#description' => t('Should this node be made available as a spotbox?'),
        );

        if (nodespotbox_used_supplied_view($node->type)) {
          $view_name = variable_get('nodespotbox_view_name_'. $node->type, FALSE);
          if ($view_name) {
            $form['nodespotbox']['display'] = array(
              '#type' => 'select',
              '#title' => t('View display id'),
              '#description' => t('The view aboves display. If selected that users can choose, this will be the default display.'),
              '#options' =>  _nodespotbox_load_views_info($view_name),
              '#default_value' => isset($node->nodespotbox_display) ? $node->nodespotbox_display : 'none',
            );
          }
        }
      }

      // Add translation fallback field for nodespotbox and translation enabled source nodes only
      if (module_exists('translation') && translation_supported_type($node->type) && empty($node->translation_source)) {
        $form['nodespotbox']['translation_fallback'] = array(
          '#type' => 'checkbox',
          '#title' => t('Enable translation fallback?'),
          '#description' => t('If checked, the source translation node will be used when a translation for the current language does not exist.  If unchecked, the block will not be displayed if a matching translation does not exist.'),
          '#default_value' => $node->nodespotbox_translation_fallback,
        );
      }
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function nodespotbox_nodeapi(&$node, $op, $teaser, $page) {
  // do nothing if not enabled
  if (!nodespotbox_type_enabled($node)) {
    return;
  }

  switch ($op) {
    case 'load':
      // If user can choose to create a spotbox
      if (!variable_get('nodespotbox_always_'. $node->type, 1)) {
        $available = 0;
        $result = db_fetch_array(db_query('SELECT nid, view_display FROM {nodespotbox} WHERE nid=%d', $node->nid));
        if ($result) {
          $available = 1;
          if (nodespotbox_used_supplied_view($node->type)) {
            $display = $result['view_display'];
          }
          else {
            $display = FALSE;
          }
        }
      }
      $tnid = $node->tnid ? $node->tnid : $node->nid;
      return array(
          'nodespotbox_translation_fallback' => variable_get('nodespotbox_translation_fallback_'. $tnid, 1),
          'nodespotbox_available' => $available,
          'nodespotbox_display' => $display,
        );

    case 'insert':
    case 'update':
      // Set the translation fallback variable if set.
      if (isset($node->nodespotbox['translation_fallback'])) {
        $tnid = $node->tnid ? $node->tnid : $node->nid;
        variable_set('nodespotbox_translation_fallback_'. $tnid, $node->nodespotbox['translation_fallback']);
      }

      // Save spotbox avalibility, if not set to aways provide spotbox
      if (!variable_get('nodespotbox_always_'. $node->type, 1)) {
        db_query('DELETE FROM {nodespotbox} WHERE nid = %d', $node->nid);
        if (isset($node->nodespotbox['available']) && $node->nodespotbox['available']) {
          db_query('INSERT INTO {nodespotbox} VALUES (%d, "%s", "%s")', $node->nid, $node->type, $node->nodespotbox['display']);

          // Clear context modules cache (or it will not be available in the drop down).
          if (function_exists('context_invalidate_cache')) {
            // Only some off the cache needs to be cleared, so don't call context_invalidate_cache
            cache_clear_all('context', 'cache', TRUE);
          }
        }
        drupal_set_message(t('Spotbox configuration has been saved.'));
      }

      _block_rehash();
      break;

    case 'delete':
      db_query('DELETE FROM {nodespotbox} WHERE nid=%d', $node->nid);
      _block_rehash();
      break;
  }
}

/**
 * Implementation of hook_block().
 */
function nodespotbox_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $types = node_get_types();
      foreach ($types as $node_type) {
        if (nodespotbox_type_enabled($node_type)) {
          if (!variable_get('nodespotbox_always_'. $node_type->type, 1)) {
            $result = db_query("SELECT nid, title FROM {node} n WHERE type = '%s'AND status = 1 AND nid in (SELECT nid FROM {nodespotbox} WHERE type = n.type) AND (nid = tnid OR tnid = 0)", $node_type->type);
            while ($node = db_fetch_object($result)) {
              $blocks[$node->nid] = array('info' => $node->title .' (nodespotbox)');
            }
          }
          else {
            // Fetch all nodes of this type, excluding translations.
            $result = db_query("SELECT nid, title FROM {node} WHERE type = '%s' AND status = 1 AND (nid = tnid OR tnid = 0)", $node_type->type);
            while ($node = db_fetch_object($result)) {
              $blocks[$node->nid] = array('info' => $node->title .' (nodespotbox)');
            }
          }
        }
      }
      return $blocks;

    case 'configure':
      $defaults = variable_get('nodespotbox_block_' . $delta, array('teaser' => 0, 'links' => 1));
      $form['teaser'] = array(
        '#title' => t('Show only node teaser'),
        '#type' => 'checkbox',
        '#default_value' => $defaults['teaser'],
      );
      $form['links'] = array(
        '#type' => 'checkbox',
        '#default_value' => $defaults['links'],
        '#title' => t('Include node links for "add comment", "read more" etc.'),
      );
      return $form;

    case 'save':
      variable_set('nodespotbox_block_' . $delta, array('teaser' => $edit['teaser'], 'links' => $edit['links']));
      break;

    case 'view':
      $block = array();
      // Find node type, if view is select don't load the node
      $node_type = db_fetch_object(db_query('SELECT type FROM {node} WHERE nid = %d', $delta))->type;
      $view_name = variable_get('nodespotbox_view_name_'. $node_type, NULL);

      // Get view display
      $view_display_id = variable_get('nodespotbox_view_display_id_'. $node_type, NULL);
      if (nodespotbox_used_supplied_view($node_type)) {
        $view_display_id = db_result(db_query("SELECT view_display FROM {nodespotbox} WHERE nid = %d", $delta));
      }
      if ($view_name && $view_display_id) { // Display block as view
        $block['content'] = views_embed_view($view_name, $view_display_id, $delta);
      }
      else {
        $node = node_load($delta);
        if (!node_access('view', $node)) {
          return;
        }
        $nodespotbox_display = variable_get('nodespotbox_block_' . $delta, array('teaser' => 0, 'links' => 1));

        // if the node type is translatable, try to load the node with the appropriate
        // language from the translation set.
        if (module_exists('translation') && translation_supported_type($node->type)) {
          global $language;
          $translations = translation_node_get_translations($node->tnid);
          if ($translations[$language->language]) {
            $node = node_load($translations[$language->language]->nid);
          }
          elseif (!$node->nodespotbox_translation_fallback) {
            // if no translation was found, and not using the fallback option
            // return nothing, so the block doesn't display.
            return;
          }
          // otherwise we just use the main node
        }

        // Set a flag so that themes have more context.
        $node->nodespotbox = TRUE;

        $block['subject'] = check_plain($node->title);
        $block['content'] = node_view($node, $nodespotbox_display['teaser'], TRUE, $nodespotbox_display['links']);
      }

      return $block;
  }
}

/**
 * Implementation of hook_link().
 */
function nodespotbox_link($type, $node = NULL, $teaser = FALSE) {
  $links = array();

  if ($type == 'node' && nodespotbox_type_enabled($node)) {
    if (node_access('update', $node)) {
      $links['nodespotbox_edit'] = array(
        'title' => t('Edit'),
        'href' => 'node/'. $node->nid .'/edit',
        'query' => drupal_get_destination(),
      );
    }
    if (module_exists('translation') && _translation_tab_access($node)) {
      $links['nodespotbox_translate'] = array(
        'title' => t('Translate'),
        'href' => 'node/'. $node->nid .'/translate',
        'query' => drupal_get_destination(),
      );
    }
    if (user_access('administer blocks')) {
      $links['nodespotbox_configure'] = array(
        'title' => t('Configure'),
        'href' => 'admin/build/block/configure/nodespotbox/'. $node->nid,
        'query' => drupal_get_destination(),
      );
    }
  }

  return $links;
}

/**
 * Utility function to load views name and displays.
 *
 * @return string array
 */
function _nodespotbox_load_all_views_info() {
  // Load all views
  $views = views_get_all_views();

  // Get the information that we need from views
  $result = array();
  foreach ($views as $view) {

    // If disabled, don't collect information
    if ($view->disabled) {
      continue;
    }

    // Add index for current view
    $view_info = array();
    
    // Find all displayes
    $displays = array();
    foreach (array_keys($view->display) as $id) {
      // Find display name
      $display_name = check_plain($view->display[$id]->display_title);
      if (!isset($display_name) || $display_name == '') {
        $display_name = $id;
      }
      $displays[$id] = $display_name;
    }
    $view_info['displays'] = $displays;

    // Save the information
    $result[check_plain($view->name)] = $view_info;
  }
  return $result;
}

/**
 * Utility function to help load a views displays based on a view name.
 *
 * @param string $name
 * @return string array
 */
function _nodespotbox_load_views_info($name) {
  $view = views_get_view($name);
  $displays = array('none' => t('None'));
  foreach (array_keys($view->display) as $id) {
    $display_name = check_plain($view->display[$id]->display_title);
    if (!isset($display_name) || $display_name == '') {
      $display_name = $id;
    }
    $displays[$id] = $display_name;
  }
  return $displays;
}